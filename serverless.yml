org: kristinalindquist
app: biosymbolics-pipeline
service: biosymbolics-pipeline

frameworkVersion: '3'

provider:
  name: aws
  runtime: python3.11
  region: us-east-1
  stage: ${opt:stage, 'dev'}
  timeout: 300
  # ecr:
  #   images:
  #     chat_torch_container:
  #       # 'docker builder prune -a
  #       uri: 469840476741.dkr.ecr.${self:provider.region}.amazonaws.com/biosym_lambda-repo:chat_torch_latest
  vpc:
    securityGroupIds:
      - Ref: LambdaSecurityGroup
    subnetIds:
      - ${self:custom.subnetA}
      - ${self:custom.subnetB}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - ssm:GetParameter
          Resource: "arn:aws:ssm:*:*:parameter/biosymbolics/pipeline/*"
        - Effect: Allow
          Action: 's3:ListBucket'
          Resource: '*'
        - Effect: Allow
          Action:
            - 's3:GetObject'
            - 's3:PutObject'
          Resource:
            - 'arn:aws:s3:::biosym-patents-*/*'
        - Effect: Allow
          Action:
            - 'rds:DescribeDBClusters'
            - 'rds:DescribeDBInstances'
            - 'rds:StopDBCluster'
            - 'rds:StartDBCluster'
            - 'rds:StopDBInstance'
            - 'rds:StartDBInstance'
            - 'rds:RestoreDBClusterFromSnapshot'
            - 'rds:CreateDBClusterSnapshot'
            - 'rds:ListTagsForResource'
          Resource:
            # arn:aws:rds:*:*:cluster:biosymbolics-pipeline-dev-rdscluster-*
            - 'arn:aws:rds:*:*:cluster:*'
            # arn:aws:rds:*:*:db:biosymbolics-pipeline-dev-dbinstance-*
            - 'arn:aws:rds:*:*:db:*'
            - 'arn:aws:rds:*:*:cluster-snapshot:*'
  apiGateway:
    apiKeys:
      - free:
          - ${ssm:/biosymbolics/pipeline/api/free-key}
      - paid:
          - ${ssm:/biosymbolics/pipeline/api/paid-key}
    usagePlan:
      - free:
          quota:
            limit: 50
            period: DAY
      - paid:
          quota:
            limit: 100
            period: DAY
  environment:
    # TODO: env is stored in plaintext on aws, so should access ssm from the code instead
    runtime: "python3.11"
    AWS_ACCOUNT_ID: ${AWS::AccountId}
    CACHE_BUCKET: biosym-patents-${self:provider.stage}
    DATABASE_URL: postgres://localhost:5432/patents # ${ssm:/biosymbolics/pipeline/database/patents/runtime_url}
    DB_CLUSTER:
      Ref: RdsCluster
    ENV: ${param:ENV, 'dev'}
    MONGO_URI: mongodb+srv://kristin:LcVacKsgrZ6EQ7N8@biosymbolics.i6psynp.mongodb.net/
    OPENAI_API_KEY: ${ssm:/biosymbolics/pipeline/openai/api_key}
    PINECONE_API_KEY: ${ssm:/biosymbolics/pipeline/pinecone/api_key}
    PINECONE_ENVIRONMENT: ${ssm:/biosymbolics/pipeline/pinecone/environment}
    PYTHONPATH: ./src:./binder:./:/opt/python:/opt/python/lib/python3.11/site-packages:/var/lang/lib/python3.11/site-packages/
    SEC_API_KEY: ${ssm:/biosymbolics/pipeline/sec/api_key}
    TOKENIZERS_PARALLELISM: False

functions:
  rds-control:
    vpc: ~ # no need to be in VPC; needs OB access
    events:
      # stop at 8pm MST / 3am UTC
      - schedule:
          enabled: true
          rate: cron(0 3 * * ? *)
          input:
            queryStringParameters:
              action: 'STOP'
      # stop at 7am MST / 2pm UTC
      - schedule:
          enabled: true
          rate: cron(0 14 * * ? *)
          input:
            queryStringParameters:
              action: 'START'
    handler: src.handlers.system.rds_control
    layers:
      - Ref: PythonRequirementsLambdaLayer
  search-entities:
    events:
      - http:
          path: entities/search
          method: get
          cors: true
    handler: src.handlers.entity.search
    layers:
      - Ref: PythonRequirementsLambdaLayer
  search-patents:
    events:
      - http:
          path: patents/search
          method: get
          cors: true
    handler: src.handlers.patents.search
    layers:
      - Ref: PythonRequirementsLambdaLayer
  autocomplete:
    events:
      - http:
          path: autocomplete
          method: get
          cors: true
    handler: src.handlers.patents.autocomplete
    layers:
      - Ref: PythonRequirementsLambdaLayer
  summarize-patents:
    events:
      - http:
          path: patents/reports/summarize
          method: get
          cors: true
    handler: src.handlers.patents.reports.summarize
    layers:
      - Ref: PythonRequirementsLambdaLayer
  patents-over-time:
    events:
      - http:
          path: patents/reports/time
          method: get
          cors: true
    handler: src.handlers.patents.reports.aggregate_over_time
    layers:
      - Ref: PythonRequirementsLambdaLayer
  patents-x-by-y:
    events:
      - http:
          path: patents/reports/x_by_y
          method: get
          cors: true
    handler: src.handlers.patents.reports.x_by_y
    layers:
      - Ref: PythonRequirementsLambdaLayer
  patents-characteristics:
    events:
      - http:
          path: patents/reports/characteristics
          method: get
          cors: true
    handler: src.handlers.patents.reports.patent_characteristics
    layers:
      - Ref: PythonRequirementsLambdaLayer
  patent-topics:
    events:
      - http:
          path: patents/reports/topics
          method: get
          cors: true
    handler: src.handlers.patents.reports.analyze_topics
    layers:
      - Ref: PythonRequirementsLambdaLayer
  describe-terms:
    vpc: ~ # no need to be in VPC; needs OB access
    events:
      - http:
          path: terms/describe
          method: get
          cors: true
    handler: src.handlers.patents.describe
    layers:
      - Ref: PythonRequirementsLambdaLayer
  predict-clindev:
    vpc: ~ # no need to be in VPC; needs OB access
    events:
      - http:
          path: clindev/predict/timelines
          method: get
          cors: true
    handler: src.handlers.clindev.predict_timelines
    layers:
      - Ref: PythonRequirementsLambdaLayer
  search-trials:
    events:
      - http:
          path: trials/search
          method: get
          cors: true
    handler: src.handlers.clindev.search
    layers:
      - Ref: PythonRequirementsLambdaLayer

plugins:
  - serverless-python-requirements
  - serverless-offline

package:
  patterns:
    - "!**"
    - "src/**"
    - "!**/__pycache__/**"
    - "!src/scripts/**"
    - "!src/data/**"
    - "!**/test/**"

custom:
  vpcId: vpc-0cef10ce4b3f2955e
  subnetA: subnet-097d7452bff44a9bc
  subnetB: subnet-0af5fe0054c832df3
  igw: igw-0cd81e264ec0cab9f
  rdsEngine: aurora-postgresql
  serverless-offline:
    httpPort: 3001
  pythonRequirements:
    dockerizePip: true
    slim: true
    strip: true
    # https://biercoff.com/how-to-fix-package-not-found-error-importlib-metadata/
    slimPatternsAppendDefaults: false
    # if problems only with deployed lambdas, it might be this ↓↓↓
    slimPatterns:
      - "**/*.py[c|o]"
      - "**/__pycache__/**"
      - "**/tests/**"
      # - "**/botocore/data/**"
      - "**/cygrpc.cpython-311-x86_64-linux-gnu.so"
    fileName: src/handlers/requirements.txt
    layer:
      compatibleRuntimes:
          - "python3.11"
    # noDeploy isn't working for layers
    # https://github.com/serverless/serverless-python-requirements/issues/577
    noDeploy:
      - pytest
      - grpc
      - pandas

resources:
  Resources:
    RdsClusterSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Allow ingress on 5432 (psql)
        VpcId: ${self:custom.vpcId}
        SecurityGroupIngress:
          - IpProtocol: tcp
            ToPort: 5432
            FromPort: 5432
            SourceSecurityGroupId:
              Ref: LambdaSecurityGroup
    RdsCluster:
      Type: AWS::RDS::DBCluster
      Properties:
        Engine: ${self:custom.rdsEngine}
        MasterUsername: ${ssm:/biosymbolics/pipeline/database/patents/main_username}
        MasterUserPassword: ${ssm:/biosymbolics/pipeline/database/patents/main_password}
        DatabaseName: ${ssm:/biosymbolics/pipeline/database/patents/db_name}
        Port: 5432
        AutoMinorVersionUpgrade: true
        ServerlessV2ScalingConfiguration:
          MaxCapacity: 16
          MinCapacity: 0.5
        EnableHttpEndpoint: true
        StorageEncrypted: true
        VpcSecurityGroupIds:
          - "Fn::GetAtt": ["RdsClusterSecurityGroup", "GroupId"]
    DBInstance:
      Type: AWS::RDS::DBInstance
      Properties:
        DBClusterIdentifier: !Ref RdsCluster
        DBInstanceClass: db.serverless
        Engine: ${self:custom.rdsEngine}
        PubliclyAccessible: false
    LambdaSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Allow outbound 443 (https) and 5432 (psql)
        SecurityGroupEgress:
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: 5432
            ToPort: 5432
            CidrIp: 0.0.0.0/0
        VpcId: ${self:custom.vpcId}
    S3:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: biosym-patents-${self:provider.stage}
        AccessControl: Private
        VersioningConfiguration:
          Status: Enabled
        LifecycleConfiguration:
          Rules:
            - Id: DeleteAfter30Days
              Status: 'Enabled'
              ExpirationInDays: 30
    StackRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: ${self:custom.vpcId}
    # https://www.serverlessguru.com/blog/accessing-s3-using-lambda-inside-a-private-subnet-of-a-vpc
    VpcEndpointS3:
      Type: AWS::EC2::VPCEndpoint
      Properties:
        RouteTableIds:
          - Ref: StackRouteTable
        ServiceName: com.amazonaws.${self:provider.region}.s3
        VpcId: ${self:custom.vpcId}
    SubnetRouteTableAssociationPrivate1:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: ${self:custom.subnetA}
        RouteTableId:
          Ref: StackRouteTable
    SubnetRouteTableAssociationPrivate2:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: ${self:custom.subnetB}
        RouteTableId:
          Ref: StackRouteTable
    RoutePublic:
      Type: AWS::EC2::Route
      Properties:
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId: ${self:custom.igw}
        RouteTableId:
          Ref: StackRouteTable
  Outputs:
    RdsClusterId:
      Description: id of RDS cluster
      Value:
        Ref: RdsCluster
