// database
datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// generator
generator client {
    provider             = "prisma-client-js"
    recursive_type_depth = 5
    previewFeatures      = ["fullTextSearch"]
}

model BiomedicalEntity {
    id            String                   @id @unique
    children      BiomedicalEntity[]       @relation("entity_to_parent")
    comprised_of  BiomedicalEntity[]       @relation("entity_comprised_of")
    comprises     BiomedicalEntity[]       @relation("entity_comprised_of")
    entity_type   BiomedicalEntityType
    indications   Indicatable[] // backref
    interventions Intervenable[] // backref
    name          String                   @unique
    parents       BiomedicalEntity[]       @relation("entity_to_parent")
    search        Unsupported("tsvector")?
    sources       Source[]
    synonyms      String[]

    @@map("biomedical_entity")
}

model Patent {
    id                      String                   @id @unique // publication_number
    application_number      String
    abstract                String
    assignees               Ownable[]                @relation("assignee_to_patent")
    attributes              String[]
    claims                  String
    country_code            String
    description             String
    embeddings              Float[]
    interventions           Intervenable[]
    indications             Indicatable[]
    inventors               Ownable[]                @relation("inventor_to_patent")
    inverse_similar_patents Patent[]                 @relation("similar_patents")
    ipc_codes               String[]
    other_ids               PatentToIds[]
    patent_id               String?
    priority_date           DateTime
    search                  Unsupported("tsvector")?
    similar_patents         Patent[]                 @relation("similar_patents")
    title                   String
    url                     String

    @@map("patent")
}

model PatentToIds {
    id        String   @id @unique
    other_ids String[]
    patent    Patent?  @relation(fields: [patent_id], references: [id])
    patent_id String?

    @@map("patent_to_ids")
}

model RegulatoryApproval {
    id                  String                   @id @unique
    agency              String
    application_type    String
    approval_date       DateTime
    indications         Indicatable[]
    interventions       Intervenable[]
    owner               Ownable[]
    pharmacologic_class String
    search              Unsupported("tsvector")?
    url                 String

    @@map("regulatory_approval")
}

model Trial {
    id                      String                   @id @unique
    abstract                String?
    acronym                 String?
    arm_types               String[]
    comparison_type         String?
    dropout_count           Int?
    dropout_reasons         String[]
    duration                Int?
    end_date                DateTime
    enrollment              Int?
    indications             Indicatable[]
    interventions           Intervenable[]
    last_updated_date       DateTime
    masking                 String
    max_timeframe           Int?
    outcomes                TrialOutcome[]
    pharmacologic_class     String
    phase                   String
    purpose                 String
    search                  Unsupported("tsvector")?
    sponsor_id              Int?                     @unique
    sponsor                 Ownable?
    start_date              DateTime
    status                  String
    termination_description String?
    termination_reason      String?
    title                   String
    url                     String

    @@map("trial")
}

model TrialOutcome {
    id              Int     @id @default(autoincrement())
    description     String?
    hypothesis_type String?
    name            String
    trial_id        String
    trial           Trial?  @relation(fields: [trial_id], references: [id])
    timeframe       String?

    @@map("trial_outcome")
}

model Owner {
    id         Int                      @id @default(autoincrement())
    children   Owner[]                  @relation("owner_to_parent")
    owner_type OwnerType
    parents    Owner[]                  @relation("owner_to_parent")
    name       String                   @unique
    search     Unsupported("tsvector")?
    symbols    String
    synonyms   String[]

    financial_snapshot_id Int                @unique
    financial_snapshot    FinancialSnapshot?
    ownables              Ownable[] // backref

    @@map("owner")
}

model FinancialSnapshot {
    id                         Int      @id @default(autoincrement())
    owner_id                   Int      @unique
    owner                      Owner    @relation(fields: [owner_id], references: [id])
    market_cap                 Float?
    total_debt                 Float?
    net_debt                   Float?
    current_ratio              Float?
    debt_equity_ratio          Float?
    ebitda                     Float?
    gross_profit               Float?
    return_on_equity           Float?
    return_on_research_capital Float?
    snapshot_date              DateTime

    @@map("financials")
}

model Ownable {
    id                     Int                 @id @default(autoincrement())
    assignee_patent        Patent?             @relation("assignee_to_patent", fields: [assignee_patent_id], references: [id])
    assignee_patent_id     String?
    inventor_patent        Patent?             @relation("inventor_to_patent", fields: [inventor_patent_id], references: [id])
    inventor_patent_id     String?
    is_primary             Boolean
    owner                  Owner               @relation(fields: [owner_id], references: [id])
    owner_id               Int
    raw                    String?
    regulatory_approval    RegulatoryApproval? @relation(fields: [regulatory_approval_id], references: [id])
    regulatory_approval_id String?
    trial                  Trial?              @relation(fields: [trial_id], references: [id])
    trial_id               String?             @unique

    @@map("ownable")
}

model Intervenable {
    id                     String              @id @unique
    entity                 BiomedicalEntity    @relation(fields: [entity_id], references: [id])
    entity_id              String
    is_primary             Boolean
    intervention_type      String
    mention_index          Int
    patent                 Patent?             @relation(fields: [patent_id], references: [id])
    patent_id              String?
    raw                    String?
    regulatory_approval    RegulatoryApproval? @relation(fields: [regulatory_approval_id], references: [id])
    regulatory_approval_id String?
    trial_id               String?
    trial                  Trial?              @relation(fields: [trial_id], references: [id])

    @@map("intervention_map")
}

model Indicatable {
    id                     String              @id @unique
    entity                 BiomedicalEntity    @relation(fields: [entity_id], references: [id])
    entity_id              String
    is_primary             Boolean
    mention_index          Int
    raw                    String?
    trial_id               String?
    trial                  Trial?              @relation(fields: [trial_id], references: [id])
    patent                 Patent?             @relation(fields: [patent_id], references: [id])
    patent_id              String?
    regulatory_approval    RegulatoryApproval? @relation(fields: [regulatory_approval_id], references: [id])
    regulatory_approval_id String?

    @@map("indication_map")
}

enum OwnerType {
    company
    person
}

enum BiomedicalEntityType {
    // indication
    condition
    disease
    phenotype

    // intervention
    behavioral
    biologic
    class
    compound
    device
    diagnostic
    dosage_form
    mechanism
    procedure
    process
    research_tool
    roa

    // both
    pathway
    target
}

enum Source {
    biosym
    ctgov
    fda
    umls
}
